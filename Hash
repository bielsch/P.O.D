/**
 * @file 02Hash.c
 * @author Nome_do_Aluno
 * @version 0.1
 * @date 2023-06-10
 *
 * @copyright Copyright (c) 2023
 *
 * @brief Arquivo template para Questão 02 do trabalho de Pesquisa e Ordenação T2.
 *
 *      Implemente uma tabela hash contendo 13 posições. O índice das chaves
 *  deve ser gerado utilizando a fórmula k mod M, onde k é a chave e M a
 *  quantidade de chaves. Resolva as colisões utilizando uma Lista Encadeada.
 *  Inclua operações de inserção, remoção e busca da chave nesta tabela hash,
 *  informando se a chave foi encontrada ou não.  Atenção: os elementos da
 *  lista encadeada não precisam estar ordenados/em ordem.
 *
 *      Utilize os vetores comentados no código para realizar seus testes.
 *
 * Atenção: Antes de entregar, conferir se dos dados de documentação no início
 * do arquivo estão preenchidos corretamente.
 *
 */
#include <stdio.h>

#define TAMANHO 13

int main(){

    int chaves = {7, 13, 33, 12, 5, 1, 0};
    int chaves = {5, 6, 9, 19, 24, 32, 41, 42, 43, 58};
    int chaves = {178, 231, 244, 292, 321, 356, 389, 421, 482, 488, 490, 502, 546, 641, 694, 786, 841, 890, 899, 922};
    int chaves = {3, 29, 43, 45,  3, 17,  2,  7, 33, 17};

    return 0;
}

/*#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define SIZE 13

typedef struct element
{
  int value;
  struct element *next;
} Element;

typedef struct
{
  Element *tab[SIZE];
} HashTable;

int calculateHash(int value) { return value % SIZE; }

void initializeHashTable(HashTable *th)
{
  for (int i = 0; i < SIZE; i++)
  {
    th->tab[i] = NULL;
  }
}

void insertHashTable(HashTable *th, int value)
{
  int index = calculateHash(value);

  Element *new = malloc(sizeof(Element));
  new->value = value;
  new->next = NULL;

  if (th->tab[index] != NULL)
  {
    Element *aux;
    // for can be replaced by while
    for (aux = th->tab[index]; aux != NULL; aux = aux->next)
    {
      if (aux->next == NULL)
      {
        aux->next = new;
        break;
      }
    }
  }
  else
    th->tab[index] = new;
}

void search(HashTable *th, int key)
{
  int index = calculateHash(key);
  Element *aux;
  for (aux = th->tab[index]; aux != NULL; aux = aux->next)
  {
    if (aux->value == key)
    {
      printf("Elemento %d está na linha %d", aux->value, index);
      return;
    }
  }
  printf("Elemento %d não existe\n", key);
}

void removeElement(HashTable *th, int key)
{
  int index = calculateHash(key);
  Element *aux, *previous;
  for (aux = th->tab[index]; aux != NULL; aux = aux->next)
  {
    if (aux->value == key)
    {
      if (aux == th->tab[index])
        th->tab[index] = aux->next;
      else if (aux->next == NULL)
        previous->next = NULL;
      else
        previous->next = aux->next;
      free(aux);
      return;
    }
    previous = aux;
  }
  printf("%s\n", "Nenhum elemento encontrado");
}

void printLine(HashTable *th, int line)
{
  if (th->tab[line] == NULL)
  {
    printf("%s\n", "Hash Vazio");
    return;
  }

  Element *aux;
  for (aux = th->tab[line]; aux != NULL; aux = aux->next)
    printf("%d\n", aux->value);
}

void print(HashTable *th)
{
  for (int i = 0; i < SIZE; i++)
  {
    printf("Linha %d:\n", i);
    printLine(th, i);
    printf("\n");
  }
}

int main()
{
  HashTable th;
  initializeHashTable(&th);
  printf("\n\nTabela vazia: \n");
  print(&th);

  insertHashTable(&th, 7);
  insertHashTable(&th, 17);
  insertHashTable(&th, 36);
  insertHashTable(&th, 100);
  insertHashTable(&th, 106);
  insertHashTable(&th, 205);
  printf("\n\nTabela apos insercoes: \n");
  print(&th);

  printf("\n\nBuscando elementos: \n");
  search(&th, 14);
  search(&th, 205);

  removeElement(&th, 205);
  removeElement(&th, 7);
  removeElement(&th, 106);
  printf("\n\nTabela apos remocoes: \n");
  print(&th);

  return 0;
}*/
